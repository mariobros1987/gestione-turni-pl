generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "accounts_provider_provideraccountid_key")
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String?
  email         String    @unique
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  firstName     String
  lastName      String
  badgeNumber   String    @unique
  department    String
  rank          String?
  phoneNumber   String?
  passwordHash  String
  isActive      Boolean?  @default(true)
  isVerified    Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  lastLogin     DateTime? @db.Timestamp(6)
  accounts      Account[]
  events        Event[]
  sessions      Session[]
  shifts        Shift[]

  @@map("users")
}

model Profile {
  id        String   @id @default(dbgenerated("nextval('profiles_id_seq'::regclass)"))
  userId    String
  name      String
  data      Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([userId, name], map: "profiles_user_id_name_key")
  @@unique([userId, name], map: "profiles_userid_name_key")
  @@map("profiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Shift {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId      String
  title       String
  startTime   DateTime  @db.Timestamp(6)
  endTime     DateTime  @db.Timestamp(6)
  location    String?
  description String?
  type        String
  status      String?   @default("scheduled")
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("shifts")
}

model Event {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId      String
  title       String
  date        DateTime  @db.Timestamp(6)
  type        String
  status      String?   @default("pending")
  description String?
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamp(6)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("events")
}

model checkin {
  id          Int      @id @default(autoincrement())
  user_id     String   @map("user_id")
  azione      String
  timestamp   DateTime @db.Timestamptz(6)
  tag_content String?
  
  @@map("checkin")
}
